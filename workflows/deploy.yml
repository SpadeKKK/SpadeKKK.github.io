name: Deploy A/B Test Designer

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Safety check
      run: safety check --json
      continue-on-error: true
    
    - name: Bandit security linter
      run: bandit -r . -x tests/
      continue-on-error: true

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/ab-test-designer
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Deploy to Vercel
      run: |
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-heroku:
    name: Deploy to Heroku (Alternative)
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository_owner == 'spadekkk'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        dockerfile_path: ./Dockerfile
        dockerfile_directory: .
        process_type: web

  deploy-gcp:
    name: Deploy to Google Cloud Run (Alternative)
    runs-on: ubuntu-latest
    needs: [test, security, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository_owner == 'spadekkk'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and Push to GCR
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/ab-test-designer:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/ab-test-designer:${{ github.sha }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ab-test-designer \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/ab-test-designer:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --port 5000 \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Artillery
      run: npm install -g artillery@latest
    
    - name: Run Performance Tests
      run: |
        # Create a simple performance test
        cat > perf-test.yml << EOF
        config:
          target: 'https://ab-test-designer.vercel.app'
          phases:
            - duration: 60
              arrivalRate: 5
        scenarios:
          - name: 'Test API endpoints'
            requests:
              - get:
                  url: '/api/health'
              - post:
                  url: '/api/design'
                  json:
                    question: 'Test question'
                    hypothesis: 'Test hypothesis'
                    metric: 'conversion-rate'
                    effect_size: 15
        EOF
        
        artillery run perf-test.yml
      continue-on-error: true

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-heroku, deploy-gcp]
    if: always() && (needs.deploy-vercel.result != 'skipped' || needs.deploy-heroku.result != 'skipped' || needs.deploy-gcp.result != 'skipped')
    
    steps:
    - name: Notify Slack Success
      if: |
        needs.deploy-vercel.result == 'success' || 
        needs.deploy-heroku.result == 'success' || 
        needs.deploy-gcp.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: '🚀 A/B Test Designer deployed successfully!'
    
    - name: Notify Slack Failure
      if: |
        needs.deploy-vercel.result == 'failure' || 
        needs.deploy-heroku.result == 'failure' || 
        needs.deploy-gcp.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: '❌ A/B Test Designer deployment failed!'

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.includes('old') || artifact.created_at < new Date(Date.now() - 7*24*60*60*1000)) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }